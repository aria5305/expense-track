{"version":3,"sources":["Containers/Auth/Auth.js","Containers/Auth/auth.module.css","Containers/Auth/signUp/signUp.module.css","Containers/Auth/signUp/signUp.js"],"names":["Auth","props","authHandler","event","preventDefault","onAuth","state","controls","email","value","password","isSignup","inputChangedHandler","controlName","updatedControlElement","updatedControl","target","valid","checkValidity","validation","touched","setState","elementType","elementConfig","type","placeholder","required","isEmail","minLength","formElementsArray","key","this","push","id","config","form","map","formElement","changed","invalid","shouldValidate","loading","classN","signup","className","classes","spin","class","authRedirect","isAuth","onSetAuthRedirectPath","to","onSubmit","children","btnType","clicked","btnText","Component","connect","auth","error","dispatch","isSignUp","actions","module","exports","container","formHeading"],"mappings":"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","file":"static/js/5.74f2b135.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport classes from './auth.module.css';\r\nimport Button from '../../Components/UI/button/button'\r\nimport Input from '../../Components/UI/input/input'\r\nimport {checkValidity} from '../../share/utility';\r\nimport {Redirect} from 'react-router-dom';\r\nimport * as actions from '../../store/action/index';\r\nimport {connect} from 'react-redux';\r\nimport Aux from '../../hoc/Auxillary'\r\nimport Spinner from '../../Components/UI/spinner/spinner'\r\n\r\n\r\nclass Auth extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n           controls:{\r\n            email: {\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'email',\r\n                    placeholder:'Your email address'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    isEmail:true\r\n                },\r\n                valid:false,\r\n                touched:false,\r\n            },\r\n            password: {\r\n                elementType:'input',\r\n                elementConfig:{\r\n                    type:'password',\r\n                    placeholder:'password'\r\n                },\r\n                value:'',\r\n                validation:{\r\n                    required:true,\r\n                    minLength:6\r\n                },\r\n                valid:false,\r\n                touched:false,\r\n            },\r\n           },\r\n          \r\n        }\r\n    }\r\n\r\n\r\n    authHandler = (event) => {\r\n        \r\n        event.preventDefault(); \r\n        this.props.onAuth(this.state.controls.email.value,this.state.controls.password.value,this.props.isSignup);\r\n        // this.props.onSetAuthRedirectPath();\r\n    }\r\n\r\n\r\n    \r\n    inputChangedHandler = (event,controlName) => {\r\n\r\n        const updatedControlElement = this.state.controls[controlName];\r\n   \r\n\r\n        const updatedControl = {\r\n            ...this.state.controls, \r\n            [controlName]:{\r\n                ...updatedControlElement,\r\n                value:event.target.value,\r\n                valid:checkValidity(event.target.value,updatedControlElement.validation),\r\n                touched:true\r\n            }\r\n        }\r\n\r\n        this.setState({controls:updatedControl})\r\n    }\r\n\r\n    \r\n    // switchAuthModeHandler = () => {\r\n    //     this.setState( prevState => {\r\n    //         return{isSignUp:!prevState.isSignUp}\r\n    //     })\r\n        \r\n    // }\r\n    render(){\r\n\r\n        const formElementsArray = []; \r\n\r\n\r\n        for(let key in this.state.controls){\r\n            formElementsArray.push({\r\n                id:key,\r\n                config:this.state.controls[key]\r\n            })\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => {\r\n            return (\r\n                <Input key={formElement.id}\r\n                    elementType={formElement.config.elementType}\r\n                    elementConfig={formElement.config.elementConfig}\r\n                    value={formElement.config.value}\r\n                    changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                    invalid={!formElement.config.valid}\r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                />\r\n\r\n            )\r\n        })\r\n\r\n\r\n        \r\n        if(this.props.loading){\r\n            let classN=\"pink\";\r\n        \r\n         if(this.props.signup === true){\r\n                classN=\"yellow\"\r\n         }\r\n\r\n  \r\n\r\n          form = \r\n          <div className={classes.spin}><Spinner class={classN}/></div>\r\n           \r\n         \r\n            \r\n        }\r\n        \r\n\r\n  \r\n\r\n        let authRedirect = null; \r\n\r\n        if(this.props.isAuth) {\r\n            //can either be directed to front page or checkout page\r\n            this.props.onSetAuthRedirectPath('/myaccount')\r\n            authRedirect = <Redirect to={this.props.authRedirect} />\r\n        }\r\n\r\n      \r\n\r\n      \r\n\r\n     \r\n\r\n        return (     \r\n                \r\n            <Aux>\r\n                {/* {errorMessage} */}\r\n                {authRedirect}\r\n            \r\n                <form className={classes.form}\r\n                 onSubmit={(event)=>event.preventDefault()}>\r\n                    {this.props.children}\r\n                     {form}\r\n                   \r\n               <div>\r\n    \r\n            <Button btnType=\"auth\" clicked={this.authHandler}>\r\n                    {this.props.btnText}\r\n            </Button>\r\n\r\n             \r\n                {/* {this.props.isLogin ?  \r\n               <div>\r\n                        <NavLink className={classes.links} to='/forgotusername'>Forgot User name</NavLink>\r\n                        <NavLink className={classes.links} to='/forgotpassword'>Forgot Password</NavLink>\r\n            \r\n               </div>    \r\n               : null } */}\r\n        \r\n\r\n              \r\n                </div>\r\n                </form>\r\n            </Aux>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading:state.auth.loading,//looking at what the authReducer via Rootreducer in index.js\r\n        error:state.auth.error,\r\n        isAuth:state.auth.isAuth,\r\n        authRedirect:state.auth.authRedirect,\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email,password,isSignUp) => dispatch(actions.auth(email,password,isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Auth); ","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"auth_form__1DNTq\",\"spin\":\"auth_spin__3tw8A\",\"links\":\"auth_links__2Gsal\",\"FontAwesome\":\"auth_FontAwesome__2E7aa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"signUp_form__3rB-s\",\"formHeading\":\"signUp_formHeading__2rzZa\",\"container\":\"signUp_container__1VaS0\",\"hint\":\"signUp_hint__2x4-W\"};","import React from 'react'; \r\nimport classes from './signUp.module.css'; \r\nimport Auth from '../Auth';\r\n\r\n\r\n\r\nconst signup = (props) => {\r\n\r\n   \r\n    return (\r\n        <div className={classes.container}>\r\n                \r\n        <div className={classes.form}>\r\n            <Auth btnText=\"Sign up\" signup={true}>\r\n                <h1 className={classes.formHeading}>\r\n                    Create your account\r\n                </h1>\r\n\r\n            </Auth>\r\n            \r\n          </div>\r\n          </div>\r\n    )\r\n}\r\n\r\nexport default signup;"],"sourceRoot":""}